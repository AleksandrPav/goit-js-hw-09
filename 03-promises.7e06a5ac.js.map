{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,UAAWC,SAASC,cAAc,SAClCC,YAAaF,SAASC,cAAc,kBACpCE,UAAWH,SAASC,cAAc,iBAClCG,YAAaJ,SAASC,cAAc,oBAItCI,QAAQC,IAAIR,GAKZA,EAAKC,UAAUQ,iBAAiB,UAIhC,SAAsBC,GAEpBA,EAAEC,iBACF,IAAIC,EAAQC,OAAOb,EAAKI,YAAYU,OAChCC,EAASF,OAAOb,EAAKM,YAAYQ,OACjCE,EAAOH,OAAOb,EAAKK,UAAUS,OAqBjC,SAASG,EAAcC,EAAUC,GACjC,MAAMC,EAAgBC,KAAKC,SAAW,GAYtC,OAXgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLN,EACNI,EAAQ,CAACG,SAAAT,QAAUC,IAGnBM,EAAQ,CAACE,SAAAT,QAAUC,MAGhBA,MA9BLS,EAAUF,YAAW,KACnB,IAAK,IAAIG,EAAI,EAAGA,EAAId,EAAQc,GAAK,EAAG,CAClCC,EAAWD,EAAI,EAChB,IAAIE,EAAInB,EAAQI,EAAOa,EACtBZ,EAAca,EAAUC,GAAGC,MAAK,EAAEL,SAAAM,EAAQd,MAAEA,MAC1CrB,EAAAoC,OAAOC,QAAQ,uBAAqBF,QAAiBd,UACpDiB,OAAM,EAAET,SAAAU,EAAQlB,MAAEA,MACnBrB,EAAAoC,OAAOI,QAAQ,sBAAoBD,QAAelB,UAEpDY,GAAKf,KAENJ,MArBL,IAAIkB,EAAW,EACXF,EAAU","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  inputForm: document.querySelector(\".form\"),\n  inputDealay: document.querySelector(\"[name='delay']\"),\n  inputStep: document.querySelector(\"[name='step']\"),\n  inputAmount: document.querySelector(\"[name='amount']\"),\n}\n\n\nconsole.log(refs);\n\n\n\n\nrefs.inputForm.addEventListener(\"submit\", onFormSubmit);\nlet position = 0;\nlet timerId = null;\n\nfunction onFormSubmit(e) {\n  \n  e.preventDefault();\n  let delay = Number(refs.inputDealay.value);\n  let amount = Number(refs.inputAmount.value);\n  let step = Number(refs.inputStep.value);\n  \n  timerId = setTimeout(() => {\n    for (let i = 0; i < amount; i += 1) {\n      position = i + 1;\n     let s = delay + step * i;\n      createPromise(position, s).then(({position, delay}) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      }).catch(({position, delay}) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n      s += step;\n    }\n  }, delay);\n\n\n\n\n\n\n  \n  function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n    resolve({position, delay});\n    // Fulfill\n      } else {\n    reject(({position, delay}));\n    // Reject\n  }\n    }, delay);\n  });\n  return promise;\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n  "],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","inputForm","document","querySelector","inputDealay","inputStep","inputAmount","console","log","addEventListener","e","preventDefault","delay1","Number","value","amount","step","createPromise","position3","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","position","$47d4ff9957288465$var$timerId","i","$47d4ff9957288465$var$position","s","then","position1","Notify","success","catch","position2","failure"],"version":3,"file":"03-promises.7e06a5ac.js.map"}